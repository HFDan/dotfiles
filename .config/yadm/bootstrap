#!/usr/bin/bash

# Bootstrap script for setting up a new machine with yadm
# Run this script after cloning your yadm repository

RED="\033[31m"
TERM_RESET="\033[0m"

function log() {
    local level="$1"
    shift
    local msg="$*"

    local color reset
    reset="\033[0m"

    case "$level" in
        ERROR)   color="\033[31m" ;; # Red
        WARN) color="\033[33m" ;; # Yellow
        SUCCESS) color="\033[32m" ;; # Green
        INFO)    color="\033[37m" ;; # White/gray
        *)       color="\033[0m"  ;; # Default
    esac
    # Decide whether to include the level label
    if [[ "$level" == "INFO" || "$level" == "SUCCESS" ]]; then
        echo -e "${color}==>${reset} ${msg}"
    else
        echo -e "${color}==> ${level}:${reset} ${msg}"
    fi
}

function ask() {
    local prompt="$1"
    local default="$2"  # Should be Y or N (caps)
    local answer

    # Figure out the prompt display for default
    local prompt_default
    if [[ "$default" == "Y" ]]; then
        prompt_default="Y/n"
    else
        prompt_default="y/N"
    fi

    while true; do
        read -rp "$prompt [$prompt_default]: " answer
        # If empty, pick the default
        if [[ -z "$answer" ]]; then
            answer="$default"
        fi
        # Normalize to uppercase for comparison
        answer="${answer^^}"
        if [[ "$answer" == "Y" || "$answer" == "N" ]]; then
            return $([[ "$answer" == "Y" ]] && echo 0 || echo 1)
        else
            echo "Please answer Y or N."
        fi
    done
}

TEMP_DIR="/tmp/yadm-bootstrap"
log INFO "Making temp dir ${TEMP_DIR}"
mkdir -p $TEMP_DIR || {
    log ERROR "Could not make temp dir"
    exit 1
}
cd $TEMP_DIR || {
    log ERROR "Could not cd to temp dir"
    exit 1
}

ELEVATION_PROG=("/usr/bin/doas" "/usr/bin/sudo")
for prog in "${ELEVATION_PROG[@]}"; do
    if [[ -x "$prog" ]]; then
        SELECTED_ELEVATION="$prog"
        break
    fi
done

log INFO "Checking if paru is installed"
if [[ ! -x "/usr/bin/paru" ]]; then # Check if paru is installed
    log INFO "Installing paru"
    git clone https://aur.archlinux.org/paru.git || {
        log ERROR "Could not clone paru"
        exit 1
    }
    cd paru
    makepkg -Csci || {
        log ERROR "Could not install paru"
        exit 1
    }
    cd ..
    log SUCCESS "Finished installing paru"
else
    log SUCCESS "Paru is already installed" 
fi

log INFO "Installing some dependencies"
PKGLIST=(
    "opendoas"
    "git"
    "openssh"
    "base-devel"
)
"${SELECTED_ELEVATION}" "/usr/bin/pacman" -S --needed --noconfirm "${PKGLIST[@]}"

if ask "Do you want to generate ssh keys?" "Y"; then
    log INFO "Generating ssh keys"
    /usr/bin/ssh-keygen || {
        log ERROR "Could not generate SSH keys"
        exit 1
    }
    log SUCCESS "Generated ssh keys"
else
    log INFO "Skipping ssh keygen"
fi

if ! ask "Are your keys logged into github?" "Y"; then
    read -rp "Press enter when they are... "
fi

/usr/bin/paru -S "caelestia-cli-git" || {
    log ERROR "Could not install caelestia-cli"
    exit 1
}
/usr/bin/git clone git@github.com:HFDan/caelestia-shell.git || {
    log ERROR "Could not clone caelestia"
    exit 1
}
cd caelestia-shell
/usr/bin/makepkg -Csci || {
    log ERROR "Could not build caelestia successfully"
    exit 1
}
cd ..

/usr/bin/git clone git@github.com:HFDan/dani-utils.git
cd dani-utils
/usr/bin/makepkg -Csci || {
    log ERROR "Could not build dani-utils successfully"
    exit 1
}

log SUCCESS "Done"
